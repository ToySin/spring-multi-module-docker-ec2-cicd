name: Docker Image CI

env:
  DOCKER_IMAGE: ghcr.io/toysin/multi-module-with-docker:latest
  DOCKER_CONTAINER: multi-module-app

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout to Repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v4.0.0
      with:
        java-version: 21
        distribution: temurin
        cache: gradle

    - name: Create AWS Credentials file
      run: |
        mkdir ~/.aws
        echo "[default]\naws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}\n\
        aws_secret_access_key=${{ secrets.AWS_SECERT_KEY }}" \
        >> ~/.aws/credentials
        cat ~/.aws/credentials

    - name: Build with Gradle
      uses: gradle/gradle-build-action@v3.0.0-beta.3
      with:
        arguments: :api:bootJar

    # Docker Login 수행 (ghcr.io)
    - name: Login Docker
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    # Docker Image Build & Push
    - name: Docker Setup QEMU
      uses: docker/setup-qemu-action@v3.0.0
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.0.0
    - name: Build Docker Image
      run: |
        docker buildx build --platform linux/arm64,linux/amd64 \
        --tag ${{ env.DOCKER_IMAGE }} \
        --build-arg AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
        --build-arg AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
        --build-arg AWS_BUCKET=${{ secrets.AWS_BUCKET }} --push .

  deploy:
    needs: build
    runs-on: [self-hosted, localhost]

    steps:
    - name: Login Docker
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Check if Container Exists
      id: check-container
      run: |
        if docker ps -a --format '{{.Names}}' | grep ${{ env.DOCKER_CONTAINER }}; then
          echo "container_exists=true" >> $GITHUB_OUTPUT
        else
          echo "container_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Stop and Remove Current Container
      if: steps.check-container.outputs.container_exists == 'true'
      run: docker stop ${{ env.DOCKER_CONTAINER }} && docker rm ${{ env.DOCKER_CONTAINER }}
      
    - name: Pull Latest Image
      run: docker pull ${{ env.DOCKER_IMAGE }}
      
    - name: Start Container
      run: docker run -d -p 8887:8080 --name ${{ env.DOCKER_CONTAINER }} --restart always ${{ env.DOCKER_IMAGE }}
