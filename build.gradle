/**
 * 버전마다 문법이 조금 다를 수 있다.
 * 기본 생성된 파일을 참고하면서 큰 틀에 맞춰 작성하면 된다.
 */

/**
 * 플러그인은 빌드, 테스트 등 다양한 작업의 묶음이다.
 * 우리가 스프링 프로젝트를 빌드한다면, 빌드과정에서 필요한 바이너리 묶음이나 기타 등등의 귀찮은 작업들이 필요하다. (자세하게 무슨 작업인지는 모르겠다.)
 * 그냥 버튼하나만 누르면 뿅하고 빌드되도록 미리 그런 작업들을 모아둔걸 가져오는게 플러그인이라고 보면 된다.
 * 그런데 우선 부모 프로젝트에는 모듈밖에 없으니 플러그인이 필요없다. 그래서 기본적인 핵심 java를 제외하고는 apply false를 붙여준다.
 */
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
}

/**
 * 모든 프로젝트에 적용되는 사항.
 * 부모 프로젝트도 포함이다.
 * 부모 프로젝트는 어짜피 모듈만 포함할거니까 allprojects는 굳이 작성하지 않아도 될 것 같긴하다.
 */
allprojects {
    group = 'study.donshin'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '21'
    }

    repositories {
        mavenCentral()
    }
}

/**
 * 모든 서브 프로젝트에 적용되는 사항.
 */
subprojects {
    /**
     * 플러그인을 적용한다.
     */
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    /**
     * compileOnly에 annotationProcessor의 종속성을 추가한다.
     * lombok 라이브러리를 사용하기 위함이다.
     */
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    /**
     * 공통으로 사용할 의존성이다.
     * implementation -> 각자만 사용한다.
     * api -> 나를 의존하는 다른 모듈도 사용하게 된다.(쓰지도 않는데 불필요하게 가질수도 있음)
     */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}